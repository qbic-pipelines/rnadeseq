/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    qbic-pipelines/rnadeseq Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
// params marked with //* exist for the sake of completeness only;
// enabling them prevents igenomes from working
params {
    // Main input args
    input_type = 'featurecounts'
    gene_counts = null
    input =  null
    model = null
    //* gtf = null

    // DESeq2 args
    contrast_matrix = 'DEFAULT'
    contrast_list = 'DEFAULT1'
    contrast_pairs = 'DEFAULT2'
    genelist = 'NO_FILE'
    relevel = 'NO_FILE2'
    batch_effect = false
    logFC_threshold = 0
    adj_pval_threshold = 0.05
    norm_method = 'rlog'
    vst_genes_number = 1000
    round_DE = -1

    // Pathway analysis args
    //* organism = null
    //* species_library = null
    //* keytype = null
    run_pathway_analysis = false
    min_DEG_pathway = 1
    custom_gmt = 'NO_FILE3'
    set_background = true
    custom_background = 'NO_FILE7'
    datasources = null
    heatmaps_cluster_rows = true
    heatmaps_cluster_cols = false
    pathway_adj_pval_threshold = -1

    // Additional args for the report
    project_summary = null
    multiqc = 'NO_FILE4'
    software_versions = 'NO_FILE6'
    report_file = "$projectDir/assets/rnadeseq_report.Rmd"
    references_file = "$projectDir/assets/references.bibtex"
    css = "$projectDir/assets/corp-styles.css"
    logo = "$projectDir/assets/logo.png"

    // Additional arg to indicate that a github test is run
    citest = false

    // Reference genome options
    genome = null
    igenomes_base = 's3://ngi-igenomes/igenomes'
    igenomes_ignore = false

    // nextflow options
    publish_dir_mode = 'copy'
    outdir = './results'

    // Boilerplate options
    email = null
    email_on_fail = null
    plaintext_email = false
    monochrome_logs = false
    help = false
    tracedir = "${params.outdir}/pipeline_info"
    custom_config_version = 'master'
    custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    config_profile_description = null
    config_profile_contact = null
    config_profile_url = null
    hook_url           = null

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '128.GB'
    max_cpus                   = 16
    max_time                   = '240.h'

    // Schema validation default options (only those necessary for linting; rnadeseq does not use the validation plugin)
    validationSchemaIgnoreParams     = 'genomes,igenomes_base'
    validationShowHiddenParams       = false
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

// Load qbic-pipelines/rnadeseq custom profiles from different institutions.
// Warning: Uncomment only if a pipeline-specific instititutional config already exists on nf-core/configs!
// try {
//   includeConfig "${params.custom_config_base}/pipeline/rnadeseq.config"
// } catch (Exception e) {
//   System.err.println("WARNING: Could not load nf-core/config/rnadeseq profiles: ${params.custom_config_base}/pipeline/rnadeseq.config")
// }
profiles {
    debug {
        dumpHashes              = true
        process.beforeScript    = 'echo $HOSTNAME'
        cleanup                 = false
        nextflow.enable.configProcessNamesValidation = true
    }
    conda {
        conda.enabled           = true
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        conda.channels          = ['conda-forge', 'bioconda', 'defaults']
        apptainer.enabled       = false
    }
    mamba {
        conda.enabled           = true
        conda.useMamba          = true
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    docker {
        docker.enabled          = true
        conda.enabled           = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
        docker.runOptions       = '-u $(id -u):$(id -g)'
    }
    arm {
        docker.runOptions       = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    singularity {
        singularity.enabled     = true
        singularity.autoMounts  = true
        conda.enabled           = false
        docker.enabled          = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    podman {
        podman.enabled          = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    shifter {
        shifter.enabled         = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    charliecloud {
        charliecloud.enabled    = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        apptainer.enabled       = false
    }
    apptainer {
        apptainer.enabled       = true
        apptainer.autoMounts    = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
    }
    wave {
        apptainer.ociAutoPull   = true
        singularity.ociAutoPull = true
        wave.enabled            = true
        wave.freeze             = true
        wave.strategy           = 'conda,container'
    }
    gitpod {
        executor.name           = 'local'
        executor.cpus           = 4
        executor.memory         = 8.GB
    }
    test { includeConfig 'conf/test.config' }
    test_full { includeConfig 'conf/test_full.config' }
    test_contrast_matrix { includeConfig 'conf/test_contrast_matrix.config' }
    test_contrast_list { includeConfig 'conf/test_contrast_list.config' }
    test_long_contrast_names { includeConfig 'conf/test_contrast_list_long_names.config' }
    test_relevel { includeConfig 'conf/test_relevel.config' }
    test_use_vst { includeConfig 'conf/test_use_vst.config' }
    test_smrnaseq { includeConfig 'conf/test_smrnaseq.config' }
    test_star_salmon { includeConfig 'conf/test_star_salmon.config' }
    test_star_rsem { includeConfig 'conf/test_star_rsem.config' }
    test_batcheffect { includeConfig 'conf/test_batcheffect.config' }
    test_no_multiqc { includeConfig 'conf/test_no_multiqc.config' }
    test_custom_gmt { includeConfig 'conf/test_custom_gmt.config' }
}
// Set default registry for Apptainer, Docker, Podman and Singularity independent of -profile
// Will not be used unless Apptainer / Docker / Podman / Singularity are enabled
// Set to your registry if you have a mirror of containers
apptainer.registry   = 'quay.io'
docker.registry      = 'quay.io'
podman.registry      = 'quay.io'
singularity.registry = 'quay.io'

// Load igenomes.config if required
if (!params.igenomes_ignore) {
    includeConfig 'conf/igenomes.config'
} else {
    params.genomes = [:]
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

// Disable process selector warnings by default. Use debug profile to enable warnings.
nextflow.enable.configProcessNamesValidation = false

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}

manifest {
    name            = 'qbic-pipelines/rnadeseq'
    author          = """Gisela Gabernet, Silvia Morini, Oskar Wacker, QBiC"""
    homePage        = 'https://github.com/qbic-pipelines/rnadeseq'
    description     = """Differential gene expression analysis and pathway analysis of RNAseq data"""
    mainScript      = 'main.nf'
    nextflowVersion = '!>=23.04.0'
    version         = 'dev'
    doi             = ''
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
