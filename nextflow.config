/*
 * -------------------------------------------------
 *  qbic-pipelines/rnadeseq Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

// Global default params, used in configs
params {
    // Workflow flags
    // Mandatory parameters
    gene_counts = null
    metadata =  null
    model = null
    project_summary = null
    multiqc = null

    // Other parameters
    outdir = './results'
    logFCthreshold = 0
    contrast_matrix = 'DEFAULT'
    contrast_list = 'DEFAULT1'
    contrast_pairs = 'DEFAULT2'
    genelist = 'NO_FILE'
    relevel = 'NO_FILE2'
    species = null
    batch_effect = null
    report_options = "$baseDir/assets/report_options.yml"
    kegg_blacklist = 'NO_FILE3'
    quote = 'NO_FILE4'
    min_DEG_pathway = 1
    skip_pathway_analysis = 'FALSE'

    // Boilerplate options
    email = null
    plaintext_email = false
    monochrome_logs = false
    help = false
    tracedir = "${params.outdir}/pipeline_info"
    custom_config_version = 'master'
    custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    config_profile_description = null
    config_profile_contact = null
    config_profile_url = null
    show_hidden_params = false
    schema_ignore_params  = null
}

// Container slug. Stable releases should specify release tag!
// Developmental code should specify :dev
process.container = 'qbicpipelines/rnadeseq:dev'

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }
    conda {
        params.enable_conda    = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    podman {
        podman.enabled         = true
        docker.enabled         = false
        singularity.enabled    = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    shifter {
        shifter.enabled        = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        charliecloud.enabled   = false
    }
    charliecloud {
        charliecloud.enabled   = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
    }
    test { includeConfig 'conf/test.config' }
    test_contrast_matrix { includeConfig 'conf/test_contrast_matrix.config' }
    test_contrast_list { includeConfig 'conf/test_contrast_list.config' }
    test_blacklist { includeConfig 'conf/test_blacklist.config' }
    test_skip_pathway_analysis { includeConfig 'conf/test_skip_pathway_analysis.config' }
}

/* TODO
// Load igenomes.config if required
if (!params.igenomes_ignore) {
    includeConfig 'conf/igenomes.config'
} else {
    params.genomes = [:]
}
*/

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = '/.Rprofile'
    R_ENVIRON_USER   = '/.Renviron'
    JULIA_DEPOT_PATH = '/usr/local/share/julia'
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.svg"
}

// Container definition
process.container = "qbicpipelines/rnadeseq:dev"

manifest {
    name            = 'qbic-pipelines/rnadeseq'
    author          = 'Gisela Gabernet, Silvia Morini, QBiC'
    homePage        = 'https://github.com/qbic-pipelines/rnadeseq'
    description     = 'Differential gene expression analysis and pathway analysis of RNAseq data'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=21.10.3'
    version         = '2.0dev'
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1) {
                return params.max_memory as nextflow.util.MemoryUnit
            }
            else {
                return obj
            }
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1) {
                return params.max_time as nextflow.util.Duration
            }
            else {
                return obj
            }
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
